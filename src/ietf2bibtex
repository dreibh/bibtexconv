#!/usr/bin/python
# -*- coding: utf-8 -*-
# $Id$
#
# Web example script to get HTML author URL from author in list
# Copyright (C) 2014 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de
#

from xml.dom.minidom import parse
import re
import sys
import urllib
import csv
import codecs


draftPrefix = 'https://xml.resource.org/public/rfc/bibxml3/reference.I-D.'
rfcPrefix   = 'https://xml.resource.org/public/rfc/bibxml/reference.RFC.'

# Documents where meta-information XML is wrong:
blacklistTable = [
   'draft-ietf-rserpool-',
   'draft-ahmed-lssctp',
   'draft-ietf-rserpool-api',
   'draft-iyengar-sctp-cacc',
   'RFC3246'
]

monthIDTable   = [ 'jan', 'feb', 'mar', 'apr', 'may', 'jun',
                   'jul', 'aug', 'sep', 'oct', 'nov', 'dec' ]
monthNameTable = [ 'January', 'February', 'March', 'April',
                   'May', 'June', 'July', 'August',
                   'September', 'October', 'November', 'December', 'INVALID' ]

# ====== Unicode wrapper for CSV reader =====================================
def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):
    # csv.py doesn't do Unicode; encode temporarily as UTF-8:
    csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),
                            dialect=dialect, **kwargs)
    for row in csv_reader:
        # decode UTF-8 back to Unicode, cell by cell:
        yield [unicode(cell, 'utf-8') for cell in row]

# ====== Unicode wrapper for CSV reader =====================================
def utf_8_encoder(unicode_csv_data):
    for line in unicode_csv_data:
        yield line.encode('utf-8')


# ====== Get BibTeX from IETF document ======================================
def getBibTeXFromIETFDocument(document):
   for blacklistEntry in blacklistTable:
      if re.match(blacklistEntry, document):
         sys.stderr.write(document + ' is blacklisted due to bad metadata in XML file. Skipping.\n')
         return
   
   issn         = None
   documentType = None
   number       = None
   institution  = None
   language     = 'english'
   note         = None

   url = ''
   m = re.match('^draft-(.*)$', document)
   if m != None:
      url          = draftPrefix + m.group(1) + '.xml'
      documentType = 'Internet Draft'
      number       = m.group(1)
      m = re.match('^draft-ietf-(.*)$', document)
      if m != None:
         institution  = 'IETF'
      else:
         institution  = 'IETF, Individual Submission'
      # note = 'Work in Progress'

   if url == '':
      m = re.match('^RFC([0-9]*)$', document)
      if m != None:
         url = rfcPrefix + m.group(1) + '.xml'
         documentType = 'RFC'
         number       = m.group(1)
         issn         = '2070-1721'
         institution  = 'IETF'

   if url == '':
      sys.stderr.write('ERROR: Unknown document type ' + document + '!\n')
      sys.exit(1)


   # ====== Get document information from XML file =============================
   sys.stderr.write('Fetching ' + url + ' ...\n')
   try:
      xmlFile = urllib.urlopen(url)
      # print 'Parsing XML ...'
      xmlDocument = parse(xmlFile)
   except:
      sys.stderr.write('ERROR: Failed to get XML information from ' + url + '!\n')
      sys.exit(1)

   fullAuthorList   = []
   authorRegExpList = []
   authorList = xmlDocument.getElementsByTagName('author') 
   if len(authorList) == 0:
      sys.stderr.write('ERROR: It seems that the XML file ' + url + ' does not exist. Wrong document name?\n')
      sys.exit(1)

   for author in authorList:
      # print author.attributes
      # print author.attributes['initials'].value[0]
      try:
         authorRegExp = author.attributes['initials'].value[0] + '[a-zA-Z][a-zA-Z\s\.\- ]*' + \
                        author.attributes['surname'].value
         authorRegExpList.append(authorRegExp)
         fullAuthorList.append(author.attributes['initials'].value[0] +'. ' + \
                               author.attributes['surname'].value)
      except:
         continue
   #print authorRegExpList
   #print fullAuthorList

   dateList = xmlDocument.getElementsByTagName('date')
   month    = 0
   for monthName in monthNameTable:
      month = month + 1
      if monthName == dateList[0].attributes['month'].value:
         break
   try:
      day = int(dateList[0].attributes['day'].value)
   except:
      day = 0
   try:
      year = int(dateList[0].attributes['year'].value)
   except:   # Some RFCs have some garbage before the year content.
      year = dateList[0].attributes['year'].value
      l = len(year)
      year = int(year[l-4:l])
   #print day,month,year

   titleList = xmlDocument.getElementsByTagName('title')
   title = titleList[0].childNodes[0].data
   title = title.strip().replace(' (', '~(')
   title = title.strip().replace(' - ', ' -- ')
   #print title

   seriesInfoList = xmlDocument.getElementsByTagName('seriesInfo')
   series = None
   name   = None
   for seriesInfo in seriesInfoList:
      if seriesInfo.attributes['name'].value in ['RFC', 'Internet-Draft']:
         series = seriesInfo.attributes['name'].value
         name   = seriesInfo.attributes['value'].value
   #print series, name

   formatList = xmlDocument.getElementsByTagName('format')
   url = formatList[0].attributes['target'].value
   #print url
   
   # For I-Ds, use a secure URL instead of HTTP.
   url = url.replace('http://www.rfc-editor.org/rfc/',
                     'https://www.rfc-editor.org/rfc/')
   url = url.replace('http://www.ietf.org/internet-drafts/',
                     'https://tools.ietf.org/id/')
   #print url

   abstractList = xmlDocument.getElementsByTagName('t')
   abstract     = None
   try:
      abstract = abstractList[0].childNodes[0].data
   except:
      pass
   #print 'A=',abstract,"."
   
   if abstract != None:
      abstract = abstract.strip().replace('\t', ' ')
      abstract = abstract.strip().replace('\n', ' ')
      abstract = abstract.strip().replace(' (', '~(')
      abstract = abstract.strip().replace(' - ', ' -- ')
      abstract = abstract.strip().replace('i.e. ', 'i.e.\ ')
      abstract = abstract.strip().replace('e.g. ', 'e.g.\ ')
      abstract = abstract.strip().replace(' [STANDARDS-TRACK]','')

      abstract = abstract.replace('</t><t>', '\n')
      while True:
         oldLength = len(abstract)
         abstract = abstract.replace('  ', ' ')
         newLength = len(abstract)
         if oldLength == newLength:
            break


   # ====== Get full author list from text file ================================
   sys.stderr.write('Fetching ' + url + ' ...\n')
   try:
      txtFile = urllib.urlopen(url)
   except:
      sys.stderr.write('ERROR: Failed to get document from ' + url + '!\n')
      sys.exit(1)

   inAuthorsSection = False
   foundDate        = False
   line             = txtFile.readline()
   lineNumber       = 0
   while line:
      lineNumber = lineNumber + 1

      # ====== RFC category =================================================
      if lineNumber < 15:
         if re.search('^Category:', line):
            m = re.match('^Category: (.*)[ ][ ].*$', line)
            if m != None:
               category = m.group(1).strip()
               if documentType == 'RFC':
                  if category != 'Experimental':
                     documentType = category + ' RFC'
         if foundDate == False:
            m = re.match('.* (January|February|March|April|May|June|July|August|September|October|November|December)( [0-9]+,|) ([0-9][0-9][0-9][0-9])$', line)
            if m != None:
               foundDate = True
               newMonth = 0
               for monthName in monthNameTable:
                  newMonth = newMonth + 1
                  if monthName == m.group(1):
                     break
               if newMonth != month:
                  sys.stderr.write('Fix: Month ' + str(month) + ' -> ' + str(newMonth) + '\n')
                  month = newMonth
               try:
                  newDay = int(m.group(2).replace(',', ''))
               except:
                  newDay = 0
               if newDay != day:
                  sys.stderr.write('Fix: Day ' + str(day) + ' -> ' + str(newDay) + '\n')
                  day = newDay
               newYear = int(m.group(3))
               if newYear != year:
                  sys.stderr.write('Fix: Year ' + str(year) + ' -> ' + str(newYear) + '\n')
                  year = newYear

      # ====== Authors section ==============================================
      if len(authorRegExpList) < 1:
         break
      if inAuthorsSection == True:
         if not re.search('^[\s]*$', line):
            i = 0
            #sys.stderr.write(line)
            for author in authorRegExpList:
               m = re.match('^(.*)(' + author + ')([^a-zA-Z@].*)$', line)
               #print line, i, m, author
               if m != None:
                  if len(m.group(2)) >= len(fullAuthorList[i]):
                     fullAuthorList[i] = str(m.group(2))
               i = i + 1
              
         # Staying in author search mode: the line may just be a header!
         #else:
            #inAuthorsSection = False
      else:
         if re.search('^.*(Editors|Authors|\'[ \t]+[Aa]ddresses|Author\'s[ \t]+[Aa]ddress|Editor\'s[ \t]+[Aa]ddress|Author[ \t]+[Ii]nformation).*$', line):
            inAuthorsSection = True 
      
      line = txtFile.readline()

   #print 'I=',authorRegExpList
   #print 'F=',fullAuthorList


   # ====== Fix author list via author fix list ================================
   csv.register_dialect('authors-fix', delimiter=' ', quoting=csv.QUOTE_MINIMAL, skipinitialspace=True)

   inputFile = codecs.open('authors-fix.list', 'r', 'utf-8')
   inputCSV = unicode_csv_reader(inputFile, dialect='authors-fix')

   authorRow = None
   for row in inputCSV:
      for i in range(0, len(fullAuthorList), 1):
         if row[0] == fullAuthorList[i]:
            sys.stderr.write('Fix: ' + fullAuthorList[i] + ' -> ' + row[1] + '\n')
            fullAuthorList[i] = row[1]
            break

   #print authorRegExpList
   #print fullAuthorList


   # ====== Check ===========================================================
   if foundDate == False:   
      sys.stderr.write('WARNING: Unable to find date of document!')
   for i in range(1, len(authorRegExpList)):
      if authorRegExpList[i] == fullAuthorList[i]:
        sys.stderr.write('WARNING: Unable to obtain full author name for "' + str(authorRegExpList[i]) + '" from list!\n')


   # ====== Print result ====================================================
   sys.stdout.write('@TechReport{ ' + document + ',\n')
   sys.stdout.write('\tauthor = "')
   isFirstAuthor = True
   for author in fullAuthorList:
      if isFirstAuthor == True:
        isFirstAuthor = False
      else:
         sys.stdout.write(' and ')
      sys.stdout.write(author)
   sys.stdout.write('",\n')

   sys.stdout.write('\ttitle = "{' + title + '}",\n')
   sys.stdout.write('\ttype = "' + documentType + '",\n')
   sys.stdout.write('\tnumber = "' + name + '",\n')

   if day > 0:
      sys.stdout.write('\tday = "' + str(day) + '",\n')
   if ((month >= 1) and (month <= 12)):
      sys.stdout.write('\tmonth = ' + monthIDTable[month - 1] + ',\n')
   sys.stdout.write('\tyear = "' + str(year) + '",\n')

   sys.stdout.write('\tinstitution = "' + institution + '",\n')
   sys.stdout.write('\tlanguage = "' + language + '",\n')
   if issn != None:
      sys.stdout.write('\tissn = "' + issn + '",\n')
   if note != None:
      sys.stdout.write('\tnote = "' + note + '",\n')
   if abstract != None:
      sys.stdout.write('\tabstract = "{' + abstract + '}",\n')
   sys.stdout.write('\turl = "' + url + '"\n')
   
   sys.stdout.write('}\n\n')



# ###### Handle arguments ###################################################
if len(sys.argv) < 2:
   sys.stderr.write('Usage: ietf2bibtex document [...]\n')
   sys.exit(1)

sys.stdout = codecs.getwriter('utf8')(sys.stdout)
sys.stderr = codecs.getwriter('utf8')(sys.stderr)
sys.stdin  = codecs.getreader('utf8')(sys.stdin)

for i in range(1, len(sys.argv)):
   getBibTeXFromIETFDocument(sys.argv[i])
