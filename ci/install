#!/bin/bash -e
#
# Travis CI Scripts
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de


UBUNTU_MIRROR="se.archive.ubuntu.com"


# ###### Linux ##############################################################
if [ "$TRAVIS_OS_NAME" == "linux" ] ; then
   # ====== Ubuntu Linux ====================================================
   if [ "$VARIANT" == "ubuntu" -o "$VARIANT" == "debian" ] ; then
      echo "Installing eatmydata ..."
      sudo docker exec ubuntu-test bash -c "sed -e 's#http://archive.ubuntu.com/ubuntu/#http://${UBUNTU_MIRROR}/ubuntu/#g' -i /etc/apt/sources.list"
      sudo docker exec ubuntu-test bash -c "apt-get update"
      sudo docker exec ubuntu-test bash -c "apt-get install -y eatmydata python3"

      # ====== Ubuntu/Debian: extract dependencies ==========================
      echo "Extracting dependencies ..."
      UBUNTU_DEPS=`sudo docker exec ubuntu-test bash -c "ci/get-dependencies $VARIANT"`
      echo "#### Required packages for build: #####"
      echo "${UBUNTU_DEPS}"

      # ====== Ubuntu/Debian: set up compiler ===============================
      if [ "$TOOL" == "compile" ] ; then
         echo "Installing compiler and dependencies ..."
         sudo docker exec ubuntu-test bash -c "eatmydata apt-get install -y joe clang ${UBUNTU_DEPS}"

      # ====== Ubuntu/Debian: set up pbuilder ===============================
      elif [ "$TOOL" == "pbuilder" ] ; then
         echo "Installing pbuilder and dependencies ..."
         sudo docker exec ubuntu-test bash -c "eatmydata apt-get install -y joe devscripts pbuilder ${UBUNTU_DEPS}"

         distribution=`sudo docker exec ubuntu-test bash -c "lsb_release -cs" | sed -e "s/[^0-9a-zA-Z]//g"`
         if [ "$VARIANT" == "debian" ] ; then
            if [[ "$DOCKER" =~ ^(debian:)(.*)$ ]] ; then
               distribution="${BASH_REMATCH[2]}"
            fi
         fi
         echo "distribution=$distribution"

         if [ "$VARIANT" == "ubuntu" ] ; then
            mirror="http://${UBUNTU_MIRROR}/ubuntu/"
         else
            mirror="http://deb.debian.org/debian"
         fi
         echo "mirror=$mirror"

         # ====== PBuilder environment ======================================
         echo "Creating pbuilder environment ..."
         sudo docker exec ubuntu-test bash -c "cat >/etc/pbuilderrc <<OUTER-EOF
DISTRIBUTION=$distribution
COMPONENTS=\"main universe\"
MIRRORSITE=$mirror
APTCACHEHARDLINK=no
EXTRAPACKAGES=eatmydata
EATMYDATA=yes
# Multi-core: set concurrency level. The packaging scripts will handle it properly:
cores=\\\`getconf _NPROCESSORS_ONLN\\\`
export CONCURRENCY_LEVEL=\\\${cores}
export DEB_BUILD_OPTIONS=\"parallel=\\\${cores}\"
OUTER-EOF"
         sudo docker exec ubuntu-test bash -c "cat /etc/pbuilderrc"
         sudo docker exec ubuntu-test bash -c "eatmydata pbuilder create --debootstrapopts --variant=buildd"
         sudo docker exec ubuntu-test bash -c "ls -l /var/cache/pbuilder/base.tgz"

         # ====== Add ppa:dreibh/ppa, updates and backports =================
         if [ "$VARIANT" == "ubuntu" ] ; then
            echo "Ubuntu: adding adding ppa:dreibh/ppa and ${distribution}-backports ..."
            sudo docker exec ubuntu-test bash -c "eatmydata pbuilder login --save-after-login <<EOF
apt-get install -y software-properties-common
apt-add-repository -y ppa:dreibh/ppa
apt-get update
echo \"Package repositories:\"
cat /etc/apt/sources.list
cat /etc/apt/sources.list.d/*
echo \"---\"
EOF"
            wait
            sudo docker exec ubuntu-test bash -c "ls -l /var/cache/pbuilder/base.tgz"

            # NOTE: backports may be unavailable -> ignore error on apt-get update!
            sudo docker exec ubuntu-test bash -c "eatmydata pbuilder login --save-after-login <<EOF
apt-add-repository \"deb http://archive.ubuntu.com/ubuntu/ ${distribution}-updates main universe\"
apt-add-repository \"deb http://archive.ubuntu.com/ubuntu/ ${distribution}-backports main universe\"
apt-get update || true
echo \"Package repositories:\"
cat /etc/apt/sources.list
cat /etc/apt/sources.list.d/*
echo \"---\"
EOF"
            wait
            sudo docker exec ubuntu-test bash -c "ls -l /var/cache/pbuilder/base.tgz"

         elif [ "$VARIANT" == "debian" ] ; then
            echo "Debian adding ${distribution}-backports ..."
            sudo docker exec ubuntu-test bash -c "eatmydata pbuilder login --save-after-login <<EOF
apt-get install -y software-properties-common
apt-add-repository \"deb http://deb.debian.org/debian ${distribution}-updates main universe\"
apt-add-repository \"deb http://deb.debian.org/debian ${distribution}-backports main universe\"
apt-get update || true
echo \"Package repositories:\"
cat /etc/apt/sources.list
echo \"---\"
EOF"
            wait
         fi

         echo "##### Checking ... #####"
         sudo docker exec ubuntu-test bash -c "pbuilder login --save-after-login <<EOF
echo \"Package repositories:\"
cat /etc/apt/sources.list
cat /etc/apt/sources.list.d/*
echo \"---\"
EOF"
         echo "##### Done. #####"


      else
         echo >&2 "ERROR: Invalid setting of TOOL=$TOOL"
         exit 1
      fi


   # ======Fedora Core Linux ================================================
   elif [ "$VARIANT" == "fedora" ] ; then
      FEDORA_DEPS="`ci/get-dependencies $VARIANT`"

      # ====== Fedora: set up compiler ======================================
      if [ "$TOOL" == "compile" ] ; then
         sudo docker exec ubuntu-test bash -c "dnf install -y make clang ${FEDORA_DEPS}"

      # ====== Fedora: set up pbuilder ======================================
      elif [ "$TOOL" == "mock" ] ; then
         sudo docker exec ubuntu-test bash -c "dnf install -y make findutils rpmdevtools fedora-release mock ${FEDORA_DEPS}"

      else
         echo >&2 "ERROR: Invalid setting of TOOL=$TOOL"
         exit 1
      fi

   # ======Fedora Core Linux ================================================
   else
      echo >&2 "ERROR: Invalid setting of VARIANT=$VARIANT"
      exit 1
   fi

# ###### Other ##############################################################
elif [ "$TRAVIS_OS_NAME" == "osx" ] ; then
   echo "TBD"

# ###### Error ##############################################################
else
   echo >&2 "ERROR: Invalid setting of TRAVIS_OS_NAME=$TRAVIS_OS_NAME"
   exit 1
fi
